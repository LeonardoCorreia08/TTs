# -*- coding: utf-8 -*-
"""Atvd1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17iHo6D7ZnjIiLQTKqtjzojfRyp622-5H
"""

# @title Célula Oculta
!pip install gTTS

# @title Célula Oculta
!pip install pydub

# @title Célula Oculta
!pip install SpeechRecognition

# @title Célula Oculta
!pip install ffmpeg-python

# @title Célula Oculta
!apt-get -qq install -y portaudio19-dev

# @title Célula Oculta
!pip install pyaudio

# @title Célula Oculta
!pip install nltk

from gtts import gTTS
from IPython.display import Audio, display, Javascript
from pydub import AudioSegment
from google.colab import output
import os
import logging
from pydub import AudioSegment
from pydub.playback import play
import speech_recognition as sr
from base64 import b64decode
from googletrans import Translator
import nltk

# Baixe a lista de pontuações do nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

# Configuração do logger para evitar exibir o aviso RuntimeWarning
logging.getLogger("pydub.converter").setLevel(logging.ERROR)

# @title Célula Oculta

# Código JavaScript para gravar áudio do usuário usando a "MediaStream Recording API"
RECORD = """
const sleep  = time => new Promise(resolve => setTimeout(resolve, time))
const b2text = blob => new Promise(resolve => {
  const reader = new FileReader()
  reader.onloadend = e => resolve(e.srcElement.result)
  reader.readAsDataURL(blob)
})
var record = time => new Promise(async resolve => {
  stream = await navigator.mediaDevices.getUserMedia({ audio: true })
  recorder = new MediaRecorder(stream)
  chunks = []
  recorder.ondataavailable = e => chunks.push(e.data)
  recorder.start()
  await sleep(time)
  recorder.onstop = async ()=>{
    blob = new Blob(chunks)
    text = await b2text(blob)
    resolve(text)
  }
  recorder.stop()
})
"""
# Função microfone
def record(sec=5):
  # Executa o código JavaScript para gravar o áudio
  display(Javascript(RECORD))
  # Recebe o áudio gravado como resultado do JavaScript
  js_result = output.eval_js('record(%s)' % (sec * 1000))
   # Decodifica o áudio em base64
  audio = b64decode(js_result.split(',')[1])
  # Salva o áudio em um arquivo
  file_name = 'curs0.wav'
  with open(file_name, 'wb') as f:
    f.write(audio)
  # Retorna o caminho do arquivo de áudio
  return f'/content/{file_name}'


# Função para adicionar a pontuação e sinais corretos ao texto traduzido
def add_punctuation(text):
    # Tokenizar o texto em palavras
    words = nltk.word_tokenize(text)

    # Obter as tags de cada palavra para identificar a pontuação
    word_tags = nltk.pos_tag(words)

    # Dicionário para mapear a tag da pontuação para a pontuação correspondente
    punctuation_map = {
        "SYM": "",   # Símbolo
        "``": "\"",  # Aspas duplas esquerdas
        "''": "\"",  # Aspas duplas direitas
        "(": "(",    # Parênteses esquerdo
        ")": ")",    # Parênteses direito
        ",": ",",    # Vírgula
        ".": ".",    # Ponto final
        ":": ":",    # Dois pontos
        ";": ";",    # Ponto e vírgula
        "?": "?",    # Pergunta
        "!": "!"     # Exclamação
    }

    # Construir o texto com a pontuação correta
    punctuated_text = ""
    for word, tag in word_tags:
        if tag in punctuation_map:
            punctuated_text += punctuation_map[tag]
        punctuated_text += word + " "

    return punctuated_text

# Função para transcrever o áudio gravado em português e traduzir para inglês
def transcrever_e_traduzir(audio_file):
    recognizer = sr.Recognizer()
    translator = Translator()

    with sr.AudioFile(audio_file) as source:
        audio_data = recognizer.record(source)

    try:
        texto_portugues = recognizer.recognize_google(audio_data, language="pt-BR")
        print("Texto em português reconhecido:", texto_portugues)

        # Traduzir o texto para inglês
        texto_ingles = translator.translate(texto_portugues, src="pt", dest="en")
        print("Texto traduzido para inglês:", texto_ingles.text)


    except sr.UnknownValueError:
        print("Não foi possível reconhecer o áudio. Por favor, tente novamente.")
        return None

# Variável texto inicialmente vazia
texto = ""

# Função para solicitar a opção ao usuário e retornar um número válido
def obter_opcao_valida():
    while True:
        print("Selecione uma opção:")
        print("0) Digitar uma frase")
        print("1) Frase 1: Olá, como vai? Como faço para saber se realizei a atividade certa?")
        print("2) Frase 2: Descubra como será o tempo e o clima em Recife.")
        print("3) Frase 3: Vamos nos divertir muito com essa biblioteca de áudio.")
        print("4) Frase 4: Python é uma linguagem de programação de alto nível.")
        print("5) Frase 5: A aprendizagem é um processo contínuo que ocorre durante toda a vida do indivíduo.")
        print("6) Estou lhe ouvindo, pode falar.")
        opcao = input("Opção: ")
        if opcao.isdigit() and 0 <= int(opcao) <= 6:
            return int(opcao)
        print("Número inválido. Por favor, digite um número de 0 a 6.")

# Obter opção válida
opcao = obter_opcao_valida()

# Defina a variável texto de acordo com a opção escolhida
if opcao == 0:
    texto = input("Digite a frase que deseja sintetizar em áudio: ")
elif opcao in range(1, 6):
    frases_portugues = [
        "Olá, como vai? Como faço para saber se realizei a atividade certa?",
        "Descubra como será o tempo e o clima em Recife.",
        "Vamos nos divertir muito com essa biblioteca de áudio.",
        "Python é uma linguagem de programação de alto nível.",
        "A aprendizagem é um processo contínuo que ocorre durante toda a vida do indivíduo."
    ]
    texto = frases_portugues[opcao - 1]
elif opcao == 6:
    print("Estou lhe ouvindo. Fale por alguns segundos...")
    # Grava o áudio do usuário por alguns segundos
    record_file = record()
    # Exibe o caminho do arquivo de áudio gravado
    print("Caminho do arquivo de áudio gravado:", audio_file_path)
    # Se ocorreu algum erro na gravação do áudio, encerra o programa
    if not record_file:
        exit()

    # Exibe o áudio gravado
    display(Audio(record_file, autoplay=False))

# Salve o áudio gerado como curso.mp3
tts = gTTS(text=texto, lang='pt')
tts.save("curs0.mp3")

# Utilize a função Audio para tocar o arquivo mp3 salvo
Audio("curs0.mp3", autoplay=True)

# Converte o arquivo gravado (MP3) para WAV
converted_wav_file = "curs0.wav"
convert_mp3_to_wav(record_file, converted_wav_file)

# Define a variável texto como a transcrição do áudio gravado
    recognizer = sr.Recognizer()
    with sr.AudioFile(converted_wav_file) as source:
        audio_data = recognizer.record(source)

    try:
        texto = recognizer.recognize_google(audio_data, language="pt-BR")
        print("Texto reconhecido:", texto)
    except sr.UnknownValueError:
        print("Não foi possível reconhecer o áudio. Por favor, tente novamente.")
        exit()

# Chamar a função para transcrever e traduzir o áudio
transcrever_e_traduzir(converted_wav_file)

